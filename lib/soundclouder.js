// Generated by CoffeeScript 1.6.3
var SoundCloud, host_api, host_connect, https, log, qs, _getConfig, _makeCall, _request;

https = require("https");

qs = require("querystring");

log = require("dysf.utils").logger;

host_api = "api.soundcloud.com";

host_connect = "https://soundcloud.com/connect";

_getConfig = function() {
  return {
    client_id: this.client_id,
    client_secret: this.client_secret,
    redirect_uri: this.redirect_uri,
    response_type: 'code',
    scope: 'non-expiring'
  };
};

_makeCall = function(method, path, access_token, params, callback) {
  if (path && path.indexOf("/") === 0) {
    if (typeof params === "function") {
      callback = params;
      params = {};
    }
    callback = callback || function() {};
    params = params || {
      oauth_token: access_token,
      format: "json"
    };
    return _request.call(this, {
      method: method,
      uri: host_api,
      path: path,
      qs: params
    }, callback);
  } else {
    callback({
      message: "Invalid path: " + path
    });
    return false;
  }
};

_request = function(data, callback) {
  var options, qsdata, req;
  qsdata = (data.qs ? qs.stringify(data.qs) : "");
  options = {
    hostname: data.uri,
    path: "" + data.path + "?" + qsdata,
    method: data.method
  };
  if (data.method === "POST") {
    options.path = data.path;
    options.headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      "Content-Length": qsdata.length
    };
  }
  log.debug("Attempting Request: " + options.method + "; " + options.hostname + options.path);
  req = https.request(options, function(response) {
    var body;
    log.debug("Request executed: " + options.method + "; " + options.hostname + options.path);
    log.trace("Response http code: " + response.statusCode);
    log.trace("Response headers: " + JSON.stringify(response.headers));
    body = "";
    response.on("data", function(chunk) {
      return body += chunk;
    });
    return response.on("end", function() {
      var d, e;
      log.trace("Response body: " + body);
      try {
        d = JSON.parse(body);
        if (response.statusCode !== 200) {
          log.error("SoundCloud API ERROR: " + response.statusCode);
          return callback(d.errors, d);
        } else {
          log.trace("SoundCloud API OK: " + response.statusCode);
          return callback(null, d);
        }
      } catch (_error) {
        e = _error;
        return callback(e);
      }
    });
  });
  req.on("error", function(e) {
    log.error("For Request: " + options.method + "; " + options.hostname + options.path);
    log.error("Request error: " + e.message);
    return callback(e);
  });
  if (data.method === "POST") {
    log.debug("POST Body: " + qsdata);
    req.write(qsdata);
  }
  return req.end();
};

/**
 * @class
 * @namespace SoundCloud
*/


module.exports = SoundCloud = (function() {
  /*
   * Initialize with client id, client secret and redirect url.
   *
   * @constructor
   * @param {String} client_id
   * @param {String} client_secret
   * @param {String} redirect_uri
  */

  function SoundCloud(client_id, client_secret, redirect_uri) {
    var required;
    if (!(this instanceof SoundCloud)) {
      return new SoundCloud(client_id, client_secret, redirect_uri);
    }
    required = [];
    [].slice.call(arguments).forEach(function(arg) {
      if (arg == null) {
        return required.push(arg);
      }
    });
    if (required.length) {
      console.log('The following arguments are required: ', required);
      return false;
    }
    this.client_id = client_id;
    this.client_secret = client_secret;
    this.redirect_uri = redirect_uri;
  }

  /*
   * Get the url to SoundCloud's authorization/connection page.
   * 
   * @param {Object} options
   * @return {String}
  */


  SoundCloud.prototype.getConnectUrl = function(options) {
    if (!options) {
      options = _getConfig.call(this);
    }
    return host_connect + "?" + (options ? qs.stringify(options) : "");
  };

  SoundCloud.prototype.setToken = function(access_token) {
    this.access_token = access_token;
  };

  /*
   * Perform authorization with SoundCLoud and obtain OAuth token needed
   * 
   * for subsequent requests. See http://developers.soundcloud.com/docs/api/guide#authentication
   * 
   * @param {String} code sent by the browser based SoundCloud Login that redirects to the redirect_uri
   * @param {Function} callback(error, access_token) No token returned if error != null
  */


  SoundCloud.prototype.getToken = function(code, callback) {
    var options;
    options = {
      uri: host_api,
      path: "/oauth2/token",
      method: "POST",
      qs: {
        client_id: this.client_id,
        client_secret: this.client_secret,
        grant_type: "authorization_code",
        redirect_uri: this.redirect_uri,
        code: code
      }
    };
    return _request.apply(this, [options, callback]);
  };

  /*
   * Make an API call
   * 
   * @param {String} path
   * @param {String} access_token
   * @param {Object} params
   * @param {Function} callback(error, data)
   * @return {Request}
  */


  SoundCloud.prototype.get = function(path, params, callback) {
    return _makeCall.apply(this, ["GET", path, this.access_token, params, callback]);
  };

  SoundCloud.prototype.post = function(path, params, callback) {
    return _makeCall.apply(this, ["POST", path, this.access_token, params, callback]);
  };

  SoundCloud.prototype.put = function(path, params, callback) {
    return _makeCall.apply(this, ["PUT", path, this.access_token, params, callback]);
  };

  SoundCloud.prototype["delete"] = function(path, params, callback) {
    return _makeCall.apply(this, ["DELETE", path, this.access_token, params, callback]);
  };

  return SoundCloud;

})();
