// Generated by CoffeeScript 1.4.0
var SoundCloud, host_api, host_connect, https, qs, _getConfig, _request, _setupRequest;

https = require("https");

qs = require("querystring");

host_api = "api.soundcloud.com";

host_connect = "https://soundcloud.com/connect";

/**
 * Returns the config data needed to build a connect url
 *
 * @private
 * @return {Object}  The required data
*/


_getConfig = function() {
  return {
    client_id: this.client_id,
    client_secret: this.client_secret,
    redirect_uri: this.redirect_uri,
    response_type: 'code',
    scope: 'non-expiring'
  };
};

/**
 * Builds the query to be ready for the request
 *
 * @private
 * @param  {String}   method       GET, POST, PUT or DELETE
 * @param  {String}   path         The query path
 * @param  {Object}   params
 * @param  {Function} callback
*/


_setupRequest = function(method, path, params, callback) {
  var requestData;
  if (callback == null) {
    callback = function() {};
  }
  requestData = {
    method: method.toUpperCase(),
    uri: host_api
  };
  if (path[0] !== '/') {
    path = '/' + path;
  }
  requestData.path = path;
  if (typeof params === "function") {
    callback = params;
    params = null;
  }
  params = params || {
    format: "json"
  };
  params.oauth_token = this.access_token;
  requestData.params = params;
  return _request.call(this, {
    method: method,
    uri: host_api,
    path: path,
    qs: params
  }, callback);
};

/**
 * The function that does the actual query to SoundCloud
 *
 * @private
 * @param  {Object}   data     The request data
 * @param  {Function} callback
*/


_request = function(data, callback) {
  var options, params, req;
  params = qs.stringify(data.params);
  options = {
    hostname: data.uri,
    path: "" + data.path + "?" + params,
    method: data.method
  };
  if (data.method === "POST") {
    options.path = data.path;
    options.headers = {
      "Content-Type": "application/x-www-form-urlencoded",
      "Content-Length": qsdata.length
    };
  }
  req = https.request(options, function(response) {
    var body;
    body = "";
    response.on("data", function(chunk) {
      return body += chunk;
    });
    return response.on("end", function() {
      try {
        data = JSON.parse(body);
        if (response.statusCode !== 200) {
          return callback(data.errors, data);
        } else {
          return callback(null, data);
        }
      } catch (err) {
        return callback(err);
      }
    });
  });
  req.on("error", function(err) {
    return callback(err);
  });
  if (data.method === "POST") {
    req.write(params);
  }
  return req.end();
};

/**
 * @class
 * @namespace SoundCloud
*/


module.exports = SoundCloud = (function() {
  /*
       * Initialize with client id, client secret and redirect url.
       *
       * @constructor
       * @param {String} client_id
       * @param {String} client_secret
       * @param {String} redirect_uri
  */

  function SoundCloud(client_id, client_secret, redirect_uri) {
    var required;
    if (!(this instanceof SoundCloud)) {
      return new SoundCloud(client_id, client_secret, redirect_uri);
    }
    required = [];
    [].slice.call(arguments).forEach(function(arg) {
      if (!(arg != null)) {
        return required.push(arg);
      }
    });
    if (required.length) {
      console.log('The following arguments are required: ', required);
      return false;
    }
    this.client_id = client_id;
    this.client_secret = client_secret;
    this.redirect_uri = redirect_uri;
  }

  /*
       * Get the url to SoundCloud's authorization/connection page.
       *
       * @param {Object} options
       * @return {String}
  */


  SoundCloud.prototype.getConnectUrl = function(options) {
    if (!options) {
      options = _getConfig.call(this);
    }
    return host_connect + "?" + (options ? qs.stringify(options) : "");
  };

  SoundCloud.prototype.setToken = function(access_token) {
    this.access_token = access_token;
  };

  /*
       * Perform authorization with SoundCLoud and obtain OAuth token needed
       *
       * for subsequent requests. See http://developers.soundcloud.com/docs/api/guide#authentication
       *
       * @param {String} code sent by the browser based SoundCloud Login that redirects to the redirect_uri
       * @param {Function} callback(error, access_token) No token returned if error != null
  */


  SoundCloud.prototype.getToken = function(code, callback) {
    var options;
    options = {
      uri: host_api,
      path: "/oauth2/token",
      method: "POST",
      params: {
        client_id: this.client_id,
        client_secret: this.client_secret,
        grant_type: "authorization_code",
        redirect_uri: this.redirect_uri,
        code: code
      }
    };
    return _request.apply(this, [options, callback]);
  };

  /*
       * Make an API call
       *
       * @param {String} path
       * @param {Object} params
       * @param {Function} callback(error, data)
  */


  SoundCloud.prototype.get = function(path, params, callback) {
    return _setupRequest.apply(this, ["GET", path, params, callback]);
  };

  SoundCloud.prototype.post = function(path, params, callback) {
    return _setupRequest.apply(this, ["POST", path, params, callback]);
  };

  SoundCloud.prototype.put = function(path, params, callback) {
    return _setupRequest.apply(this, ["PUT", path, params, callback]);
  };

  SoundCloud.prototype["delete"] = function(path, params, callback) {
    return _setupRequest.apply(this, ["DELETE", path, params, callback]);
  };

  return SoundCloud;

})();
